from django.core.management.base import BaseCommand
from home.models import EventPage 
from googleapiclient.discovery import build
from google.oauth2 import service_account

# keyword mappings generated by GPT
keywords_dict = {
    'Cybersecurity': [
        'AI', 'artificial intelligence', 'machine learning', 'coding', 'software', 'technology',
        'encryption', 'network security', 'threat detection', 'firewalls', 'malware', 'vulnerability assessment',
        'penetration testing', 'ethical hacking', 'incident response', 'data protection', 'compliance',
        'risk management', 'cryptography', 'identity management', 'access control', 'security protocols'
    ],
    
    'Data Science': [
        'data', 'analytics', 'statistics', 'machine learning', 'big data',
        'data mining', 'data visualization', 'predictive modeling', 'data cleaning',
        'data warehousing', 'ETL (Extract, Transform, Load)', 'data engineering',
        'business intelligence', 'SQL', 'Python', 'R', 'deep learning', 'natural language processing',
        'time series analysis', 'data storytelling', 'A/B testing', 'regression analysis','exams'
    ],
    
    'Software Engineering': [
        'robotics', 'engineering', 'design', 'mechanical', 'electrical',
        'software development', 'agile methodologies', 'DevOps', 'software architecture',
        'version control', 'Git', 'object-oriented programming', 'system design',
        'API development', 'software testing', 'continuous integration', 'cloud computing',
        'microservices', 'containerization', 'Docker', 'Kubernetes', 'scalability',
        'performance optimization', 'debugging', 'code review'
    ],
    
    # AI Robotics and Gaming
    'AI Robotics and Gaming': [
        'artificial intelligence', 'machine learning', 'robotics', 'game development',
        'computer vision', 'natural language processing', 'reinforcement learning',
        'autonomous systems', 'simulation', 'virtual reality', 'augmented reality',
        'pathfinding algorithms', 'physics engines', 'character modeling', 'animation',
        'game engines', 'AI pathfinding', 'behavior trees', 'procedural generation',
        'multiplayer networking', 'game physics', 'AI-driven NPCs', 'motion capture',
        'real-time rendering', 'user experience (UX)', 'interactive design'
    ],
    
    # Software Systems
    'Software Systems': [
        'operating systems', 'distributed systems', 'system architecture',
        'middleware', 'network protocols', 'concurrency', 'parallel computing',
        'database management systems', 'transaction processing', 'scalability',
        'fault tolerance', 'load balancing', 'system integration', 'API design',
        'microservices', 'service-oriented architecture (SOA)', 'enterprise software',
        'cloud infrastructure', 'virtualization', 'containerization', 'DevOps',
        'system security', 'performance tuning', 'resource management',
        'service orchestration', 'high availability'
    ],
    
    # Web and Mobile Applications
    'Web and Mobile Applications': [
        'frontend development', 'backend development', 'full-stack development',
        'HTML', 'CSS', 'JavaScript', 'React', 'Angular', 'Vue.js',
        'mobile frameworks', 'iOS development', 'Android development',
        'Swift', 'Kotlin', 'Flutter', 'React Native', 'UI/UX design',
        'responsive design', 'RESTful APIs', 'GraphQL', 'progressive web apps (PWA)',
        'cross-platform development', 'database integration', 'authentication',
        'state management', 'performance optimization', 'app deployment',
        'version control', 'testing and debugging', 'continuous integration/continuous deployment (CI/CD)',
        'accessibility', 'SEO (Search Engine Optimization)', 'security best practices'
    ],
}

def match_keywords(description, title, keywords):
    matches = set()
    for category, words in keywords.items():
        if any(word.lower() in description.lower() or word.lower() in title.lower() for word in words):
            matches.add(category)
    return list(matches)

class Command(BaseCommand):
    help = "Import events from Google Calendar and categorize them"

    def handle(self, *args, **kwargs):
        SERVICE_ACCOUNT_FILE = os.path.join(settings.BASE_DIR, 'home/keys', 'circleapp-444305-20546ffa6de4.json')
        SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']

        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        service = build('calendar', 'v3', credentials=credentials)

        calendar_id = 'cci-events@uncc.edu'  # Replace with actual calendar ID

        self.stdout.write('Fetching events from Google Calendar...')
        events_result = service.events().list(
            calendarId=calendar_id, maxResults=2500
        ).execute()
        events = events_result.get('items', [])

        for event in events:
            title = event.get('summary', 'No Title')
            description = event.get('description', '')

            matched_categories = match_keywords(description, title, keywords_dict)

            EventPage.objects.update_or_create(
                title=title,
                defaults={
                    'description': description,
                    'matched_categories': matched_categories,
                },
            )

        self.stdout.write(self.style.SUCCESS(f'{len(events)} events imported successfully!'))